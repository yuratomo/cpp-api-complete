call cppapi#namespace('std')
call cppapi#class('forward_list', '', [
  \ cppapi#method('forward_list(', 'const allocator_type& alloc = allocator_type())', ''),
  \ cppapi#method('forward_list(', 'size_type n)', ''),
  \ cppapi#method('forward_list(', 'size_type n, const value_type& val, const allocator_type& alloc = allocator_type())', ''),
  \ cppapi#method('forward_list(', 'InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())', ''),
  \ cppapi#method('forward_list(', 'const forward_list& fwdlst)', ''),
  \ cppapi#method('forward_list(', 'const forward_list& fwdlst, const allocator_type& alloc)', ''),
  \ cppapi#method('forward_list(', 'forward_list&& fwdlst)', ''),
  \ cppapi#method('forward_list(', 'forward_list&& fwdlst, const allocator_type& alloc)', ''),
  \ cppapi#method('forward_list(', 'initializer_list<value_type> il, const allocator_type& alloc = allocator_type())', ''),
  \ cppapi#method('assign(', 'InputIterator first, InputIterator last)', 'void'),
  \ cppapi#method('assign(', 'size_type n, const value_type& val)', 'void'),
  \ cppapi#method('assign(', 'initializer_list<value_type> il)', 'void'),
  \ cppapi#method('before_begin(', ')', 'iterator'),
  \ cppapi#method('begin(', ')', 'iterator'),
  \ cppapi#method('cbefore_begin(', ')', 'const_iterator'),
  \ cppapi#method('cbegin(', ')', 'const_iterator'),
  \ cppapi#method('cend(', ')', 'const_iterator'),
  \ cppapi#method('clear(', ')', 'void'),
  \ cppapi#method('emplace_after (', 'const_iterator position, Args&&... args)', 'iterator'),
  \ cppapi#method('emplace_front (', 'Args&&... args)', 'void'),
  \ cppapi#method('empty(', ')', 'bool'),
  \ cppapi#method('end(', ')', 'iterator'),
  \ cppapi#method('erase_after(', 'const_iterator position)', 'iterator'),
  \ cppapi#method('erase_after(', 'const_iterator position, const_iterator last)', 'iterator'),
  \ cppapi#method('front(', ')', 'reference'),
  \ cppapi#method('insert_after(', 'const_iterator position, const value_type& val )', 'iterator'),
  \ cppapi#method('insert_after(', 'const_iterator position, value_type&& val )', 'iterator'),
  \ cppapi#method('insert_after(', 'const_iterator position, size_type n, const value_type& val )', 'iterator'),
  \ cppapi#method('insert_after(', 'const_iterator position, InputIterator first, InputIterator last )', 'iterator'),
  \ cppapi#method('insert_after(', 'const_iterator position, initializer_list<value_type> il )', 'iterator'),
  \ cppapi#method('max_size(', ')', 'size_type'),
  \ cppapi#method('merge(', 'forward_list& fwdlst)', 'void'),
  \ cppapi#method('merge(', 'forward_list&& fwdlst)', 'void'),
  \ cppapi#method('merge(', 'forward_list& fwdlst, Compare comp)', 'void'),
  \ cppapi#method('merge(', 'forward_list&& fwdlst, Compare comp)', 'void'),
  \ cppapi#method('pop_front(', ')', 'void'),
  \ cppapi#method('push_front (', 'const value_type& val)', 'void'),
  \ cppapi#method('push_front (', 'value_type&& val)', 'void'),
  \ cppapi#method('remove (', 'const value_type& val)', 'void'),
  \ cppapi#method('remove_if (', 'Predicate pred)', 'void'),
  \ cppapi#method('resize (', 'size_type n)', 'void'),
  \ cppapi#method('resize (', 'size_type n, const value_type& val)', 'void'),
  \ cppapi#method('reverse(', ')', 'void'),
  \ cppapi#method('sort(', ')', 'void'),
  \ cppapi#method('sort(', 'Compare comp)', 'void'),
  \ cppapi#method('splice_after(', 'const_iterator position, forward_list& fwdlst)', 'void'),
  \ cppapi#method('splice_after(', 'const_iterator position, forward_list&& fwdlst)', 'void'),
  \ cppapi#method('splice_after(', 'const_iterator position, forward_list& fwdlst, const_iterator i)', 'void'),
  \ cppapi#method('splice_after(', 'const_iterator position, forward_list&& fwdlst, const_iterator i)', 'void'),
  \ cppapi#method('splice_after(', 'const_iterator position, forward_list& fwdlst, const_iterator first, const_iterator last)', 'void'),
  \ cppapi#method('splice_after(', 'const_iterator position, forward_list&& fwdlst, const_iterator first, const_iterator last)', 'void'),
  \ cppapi#method('swap (', 'forward_list& fwdlst)', 'void'),
  \ cppapi#method('unique(', ')', 'void'),
  \ cppapi#method('unique (', 'BinaryPredicate binary_pred)', 'void'),
  \ ])

