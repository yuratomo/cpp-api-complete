call cppapi#function('a64l(', 'char *str64)', 'long', 'stdlib.h')
call cppapi#function('abort(', 'void)', 'void', 'stdlib.h')
call cppapi#function('acos(', 'double x)', 'double', 'math.h')
call cppapi#function('acosf(', 'float x)', 'float', 'math.h')
call cppapi#function('acosl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('addmntent(', 'FILE *fp, const struct mntent *mnt)', 'int', 'mntent.h')
call cppapi#function('addseverity(', 'int severity, const char *s)', 'int', 'fmtmsg.h')
call cppapi#function('adjtime(', 'const struct timeval *delta, struct timeval *olddelta)', 'int', '')
call cppapi#function('aio_cancel(', 'int fd, struct aiocb *aiocbp)', 'int', 'aio.h')
call cppapi#function('aio_error(', 'const struct aiocb *aiocbp)', 'int', 'aio.h')
call cppapi#function('aio_fsync(', 'int op, struct aiocb *aiocbp)', 'int', 'aio.h')
call cppapi#function('aio_read(', 'struct aiocb *aiocbp)', 'int', 'aio.h')
call cppapi#function('aio_return(', 'struct aiocb *aiocbp)', 'ssize_t', 'aio.h')
call cppapi#function('aio_write(', 'struct aiocb *aiocbp)', 'int', 'aio.h')
call cppapi#function('alloca(', 'size_t size)', 'void ', 'alloca.h')
call cppapi#function('argz_add(', 'char **argz, size_t *argz_len, const char *str)', 'error_t', 'argz.h')
call cppapi#function('argz_count(', 'const char *argz, size_t argz_len)', 'size_t', 'argz.h')
call cppapi#function('argz_create(', 'char * const argv[], char **argz, size_t *argz_len)', 'error_t', 'argz.h')
call cppapi#function('argz_delete(', 'char **argz, size_t *argz_len, char *entry)', 'error_t', 'argz.h')
call cppapi#function('argz_extract(', 'char *argz, size_t argz_len, char **argv)', 'void', 'argz.h')
call cppapi#function('argz_next(', 'char *argz, size_t argz_len, const char *entry)', 'char *', 'argz.h')
call cppapi#function('argz_stringify(', 'char *argz, size_t len, int sep)', 'void', 'argz.h')
call cppapi#function('asin(', 'double x)', 'double', 'math.h')
call cppapi#function('asinf(', 'float x)', 'float', 'math.h')
call cppapi#function('asinl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('asprintf(', 'char **strp, const char *fmt, ...)', 'int', 'stdio.h')
call cppapi#function('assert(', 'scalar expression)', 'void', 'assert.h')
call cppapi#function('assert_perror(', 'int errnum)', 'void', 'assert.h')
call cppapi#function('atan(', 'double x)', 'double', 'math.h')
call cppapi#function('atan2l(', 'long double y, long double x)', '', 'math.h')
call cppapi#function('atanf(', 'float x)', 'float', 'math.h')
call cppapi#function('atanl(', ' long double x)', 'long double', 'math.h')
call cppapi#function('atexit(', 'void (*function)(void))', 'int', 'stdlib.h')
call cppapi#function('atof(', 'const char *nptr)', 'double', 'stdlib.h')
call cppapi#function('atoq(', 'const char *nptr)', 'long long', 'stdlib.h')
call cppapi#function('basename(', 'char *path)', 'char ', 'libgen.h')
call cppapi#function('bcmp(', 'const void *s1, const void *s2, int n)', 'int', 'string.h')
call cppapi#function('bcmp(', 'const void *s1, const void *s2, size_t n)', 'int', 'strings.h')
call cppapi#function('bcopy(', 'const void *src, void *dest, int n)', 'void', 'string.h')
call cppapi#function('bcopy(', 'const void *src, void *dest, size_t n)', 'void', 'strings.h')
call cppapi#function('bindresvport(', 'int sd, struct sockaddr_in **sin)', 'int', 'sys/types.h netinet/in.h')
call cppapi#function('bsd_signal(', 'int signum, sighandler_t handler)', 'sighandler_t', 'signal.h')
call cppapi#function('btowc(', 'int c)', 'wint_t', 'wchar.h')
call cppapi#function('bzero(', 'void *s, int n)', 'void', 'string.h')
call cppapi#function('bzero(', 'void *s, size_t n)', 'void', 'strings.h')
call cppapi#function('cacos(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('cacosf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('cacosl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cacosl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('canonicalize_file_name(', 'const char *path)', 'char ', 'stdlib.h')
call cppapi#function('casin(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('casinf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('casinl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('casinl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('catan(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('catanf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('catanl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('catanl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('catclose(', 'nl_catd catalog)', 'int', 'nl_types.h')
call cppapi#function('catopen(', 'const char *name, int flag)', 'nl_catd', 'nl_types.h')
call cppapi#function('cbrt(', 'double x)', 'double', 'math.h')
call cppapi#function('cbrtf(', 'float x)', 'float', 'math.h')
call cppapi#function('cbrtl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('ccos(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('ccosf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('ccosh(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('ccoshf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('ccoshl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('ccoshl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('ccosl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('ccosl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('ceil(', 'double x)', 'double', 'math.h')
call cppapi#function('ceilf(', 'float x)', 'float', 'math.h')
call cppapi#function('ceill(', 'long double x)', 'long double', 'math.h')
call cppapi#function('cerf(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('cerfc(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('cerfcf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('cerfcl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cerfcl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cerff(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('cerfl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cerfl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cexp(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('cexp2(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('cexp2f(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('cexp2l(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cexp2l(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cexpf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('cexpl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cexpl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cfgetispeed(', 'const struct termios *termios_p)', 'speed_t', 'termios.h unistd.h')
call cppapi#function('cfgetospeed(', 'const struct termios *termios_p)', 'speed_t', 'termios.h unistd.h')
call cppapi#function('cfmakeraw(', 'struct termios *termios_p)', 'void', 'termios.h unistd.h')
call cppapi#function('cfsetispeed(', 'struct termios *termios_p, speed_t speed)', 'int', 'termios.h unistd.h')
call cppapi#function('cfsetospeed(', 'struct termios *termios_p, speed_t speed)', 'int', 'termios.h unistd.h')
call cppapi#function('clearenv(', 'void)', 'int', 'stdlib.h')
call cppapi#function('clearerr(', 'FILE *stream)', 'void', 'stdio.h')
call cppapi#function('clock(', 'void)', 'clock_t', 'time.h')
call cppapi#function('clog(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('clog2(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('clog2f(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('clog2l(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('clog2l(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('clogf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('clogl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('clogl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('closedir(', 'DIR *dir)', 'int', 'dirent.h')
call cppapi#function('conj(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('conjf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('conjl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('conjl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('copysignl(', 'long double x, long double y)', 'double', 'math.h')
call cppapi#function('cos(', 'double x)', 'double', 'math.h')
call cppapi#function('cosf(', 'float x)', 'float', 'math.h')
call cppapi#function('cosh(', 'double x)', 'double', 'math.h')
call cppapi#function('coshf(', 'float x)', 'float', 'math.h')
call cppapi#function('coshl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('cosl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('cproj(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('cprojf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('cprojl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('cprojl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('creall(', 'long double complex z)', '', 'complex.h')
call cppapi#function('crypt(', 'const char *key, const char *salt)', 'char ', 'unistd.h')
call cppapi#function('csin(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('csinf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('csinh(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('csinhf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('csinhl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('csinhl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('csinl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('csinl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('csqrt(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('csqrtf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('csqrtl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('csqrtl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('ctan(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('ctanf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('ctanh(', 'double complex z)', 'double complex', 'complex.h')
call cppapi#function('ctanhf(', 'float complex z)', 'float complex', 'complex.h')
call cppapi#function('ctanhl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('ctanhl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('ctanl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('ctanl(', 'long double complex z)', 'long double complex', 'complex.h')
call cppapi#function('ctermid(', 'char *s)', 'char ', 'stdio.h')
call cppapi#function('cuserid(', 'char *string)', 'char ', 'unistd.h')
call cppapi#function('des_setparity(', 'char *key)', 'void', 'rpc/des_crypt.h')
call cppapi#function('difftime(', 'time_t time1, time_t time0)', 'double', 'time.h')
call cppapi#function('dirfd(', 'DIR *dir)', 'int', 'sys/types.h dirent.h')
call cppapi#function('dirname(', 'char *path)', 'char ', 'libgen.h')
call cppapi#function('dladdr(', 'void *addr, Dl_info *info)', 'int', 'dlfcn.h')
call cppapi#function('dlclose(', 'void *handle)', 'int', 'dlfcn.h')
call cppapi#function('dlerror(', 'void)', 'char ', 'dlfcn.h')
call cppapi#function('dlopen(', 'const char *filename, int flag)', 'void ', 'dlfcn.h')
call cppapi#function('dlsym(', 'void *handle, const char *symbol)', 'void ', 'dlfcn.h')
call cppapi#function('dlvsym(', 'void *handle, char *symbol, char *version)', 'void ', 'dlfcn.h')
call cppapi#function('dprintf(', 'int fd, const char *format, ...)', 'int', 'stdio.h')
call cppapi#function('dprintf(', 'int level, const char *format, ...)', 'void', 'stdio.h')
call cppapi#function('drand48(', 'void)', 'double', 'stdlib.h')
call cppapi#function('drand48_r(', 'struct drand48_data *buffer, double *result)', 'int', 'stdlib.h')
call cppapi#function('ds_shutdown(', 'void)', 'void', 'ucd-snmp/ucd-snmp-config.h ucd-snmp/ucd-snmp-includes.h')
call cppapi#function('ecb_crypt(', 'char *key, char *data, unsigned datalen, unsigned mode)', 'int', 'rpc/des_crypt.h')
call cppapi#function('ecvt(', 'double number, int ndigits, int *decpt, int *sign)', 'char ', 'stdlib.h')
call cppapi#function('eml(', 'long double x, long double y)', 'long double ', 'math.h')
call cppapi#function('encrypt(', 'char block[64], int edflag)', 'void', 'unistd.h')
call cppapi#function('endfsent(', 'void)', 'void', 'fstab.h')
call cppapi#function('endgrent(', 'void)', 'void', 'sys/types.h grp.h')
call cppapi#function('endmntent(', 'FILE *fp)', 'int', 'mntent.h')
call cppapi#function('endnetent(', 'void)', 'void', 'netdb.h')
call cppapi#function('endprotoent(', 'void)', 'void', 'netdb.h')
call cppapi#function('endpwent(', 'void)', 'void', 'sys/types.h pwd.h')
call cppapi#function('endservent(', 'void)', 'void', 'netdb.h')
call cppapi#function('endttyent(', 'void)', 'int', 'ttyent.h')
call cppapi#function('endusershell(', 'void)', 'void', 'unistd.h')
call cppapi#function('endutent(', 'void)', 'void', 'utmpx.h')
call cppapi#function('envz_entry(', 'const char *envz, size_t *envz_len, const char *name)', 'char *', 'envz.h')
call cppapi#function('envz_get(', 'const char *envz, size_t *envz_len, const char *name)', 'char *', 'envz.h')
call cppapi#function('envz_remove(', 'char **envz, size_t *envz_len, const char *name)', 'void', 'envz.h')
call cppapi#function('envz_strip(', 'char **envz, size_t *envz_len)', 'void', 'envz.h')
call cppapi#function('erand48(', 'unsigned short xsubi[3])', 'double', 'stdlib.h')
call cppapi#function('erf(', 'double x)', 'double', 'math.h')
call cppapi#function('erfc(', 'double x)', 'double', 'math.h')
call cppapi#function('erfcf(', 'float x)', 'float', 'math.h')
call cppapi#function('erfcl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('erff(', 'float x)', 'float', 'math.h')
call cppapi#function('erfl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('error(', 'int status, int errnum, const char *format, ...)', 'void', 'error.h')
call cppapi#function('ether_aton(', 'const char *asc)', 'struct ether_addr ', 'netinet/ether.h')
call cppapi#function('ether_aton_r(', 'const char *asc, struct ether_addr *addr)', 'struct ether_addr ', 'netinet/ether.h')
call cppapi#function('ether_hostton(', 'const char *hostname, struct ether_addr *addr)', 'int', 'netinet/ether.h')
call cppapi#function('ether_line(', 'const char *line, struct ether_addr *addr, char *hostname)', 'int', 'netinet/ether.h')
call cppapi#function('ether_ntoa(', 'const struct ether_addr *addr)', 'char ', 'netinet/ether.h')
call cppapi#function('ether_ntohost(', 'char *hostname, const struct ether_addr *addr)', 'int', 'netinet/ether.h')
call cppapi#function('exit(', 'EXIT_SUCCESS)', '}', 'fmtmsg.h stdio.h')
call cppapi#function('exit(', 'int status)', 'void', 'stdlib.h')
call cppapi#function('exp(', 'double x)', 'double', 'math.h')
call cppapi#function('exp2(', 'double x)', 'double', 'math.h')
call cppapi#function('exp2f(', 'float x)', 'float', 'math.h')
call cppapi#function('exp2l(', 'long double x)', 'long double', 'math.h')
call cppapi#function('expf(', 'float x)', 'float', 'math.h')
call cppapi#function('expl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('fabs(', 'double x)', 'double', 'math.h')
call cppapi#function('fabsf(', 'float x)', 'float', 'math.h')
call cppapi#function('fabsl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('fclose(', 'FILE *fp)', 'int', 'stdio.h')
call cppapi#function('fcloseall(', 'void)', 'int', 'stdio.h')
call cppapi#function('fcvt(', 'double number, int ndigits, int *decpt, int *sign)', 'char ', 'stdlib.h')
call cppapi#function('fdiml(', 'long double x, long double y)', '', 'math.h')
call cppapi#function('fegetexcept(', 'void)', '', 'fenv.h')
call cppapi#function('fegetround(', 'void)', 'int', 'fenv.h')
call cppapi#function('feof(', 'FILE *stream)', 'int', 'stdio.h')
call cppapi#function('ferror(', 'FILE *stream)', 'int', 'stdio.h')
call cppapi#function('fesetround(', 'int rounding_mode)', 'int', 'fenv.h')
call cppapi#function('fetestexcept(', 'int excepts)', 'int', 'fenv.h')
call cppapi#function('feupdateenv(', 'const fenv_t *envp)', 'int', 'fenv.h')
call cppapi#function('fexecve(', 'int fd, char *const argv[], char *const envp[])', 'int', 'sys/time.h')
call cppapi#function('fflush(', 'FILE *stream)', 'int', 'stdio.h')
call cppapi#function('ffs(', 'int i)', 'int', 'strings.h')
call cppapi#function('ffsl(', 'long int i)', 'int', 'string.h')
call cppapi#function('ffsll(', 'long long int i)', 'int', 'string.h')
call cppapi#function('fgetgrent(', 'FILE *stream)', 'struct group ', 'stdio.h sys/types.h grp.h')
call cppapi#function('fgetpos(', 'FILE *stream, fpos_t *pos)', 'int', 'stdio.h')
call cppapi#function('fgetpwent(', 'FILE *stream)', 'struct passwd ', 'stdio.h sys/types.h pwd.h')
call cppapi#function('fgetwc(', 'FILE *stream)', 'wint_t', 'stdio.h wchar.h')
call cppapi#function('fgetws(', 'wchar_t *ws, int n, FILE *stream)', 'wchar_t ', 'wchar.h')
call cppapi#function('fileno(', 'FILE *stream)', 'int', 'stdio.h')
call cppapi#function('fileno(', 'FILE *stream)', 'int', 'stdio.h')
call cppapi#function('finite(', 'double x)', 'int', 'math.h')
call cppapi#function('finitef(', 'float x)', 'int', 'math.h')
call cppapi#function('finitel(', 'long double x)', 'int', 'math.h')
call cppapi#function('fmaxl(', 'long double x, long double y)', '', 'math.h')
call cppapi#function('fmemopen(', 'void *buf, size_t size, const char *mode)', 'FILE ', 'stdio.h')
call cppapi#function('fminl(', 'long double x, long double y)', '', 'math.h')
call cppapi#function('fmodl(', 'long double x, long double y)', '', 'math.h')
call cppapi#function('fnmatch(', 'const char *pattern, const char *string, int flags)', 'int', 'fnmatch.h')
call cppapi#function('fpathconf(', 'int filedes, int name)', 'long', 'unistd.h')
call cppapi#function('fpclassify(', 'x)', 'int', 'math.h')
call cppapi#function('fputws(', 'const wchar_t *ws, FILE *stream)', 'int', 'wchar.h')
call cppapi#function('fputws_unlocked(', 'const wchar_t *ws, FILE *stream)', '', 'stdio.h')
call cppapi#function('fread(', 'void *ptr, size_t size, size_t nmemb ", FILE *" stream )', 'size_t', 'stdio.h')
call cppapi#function('freeaddrinfo(', 'struct addrinfo *res)', 'void', 'sys/types.h sys/socket.h netdb.h')
call cppapi#function('freehostent(', 'struct hostent *ip)', 'void', 'sys/types.h sys/socket.h netdb.h')
call cppapi#function('freopen(', 'const char *path, const char *mode, FILE *stream)', 'FILE ', 'stdio.h')
call cppapi#function('frexpl(', 'long double x, int *exp)', '', 'math.h')
call cppapi#function('fseek(', 'FILE *stream, long offset, int whence)', 'int', 'stdio.h')
call cppapi#function('fseeko(', 'FILE *stream, off_t offset, int whence)', 'int', 'stdio.h')
call cppapi#function('fsetpos (', 'FILE *stream, fpos_t *pos)', 'int', 'stdio.h')
call cppapi#function('ftell(', 'FILE *stream)', 'long', 'stdio.h')
call cppapi#function('ftello(', 'FILE *stream)', 'off_t', 'stdio.h')
call cppapi#function('ftime(', 'struct timeb *tp)', 'int', 'sys/timeb.h')
call cppapi#function('ftok(', 'char *pathname, char proj_id)', 'key_t', 'sys/types.h sys/ipc.h')
call cppapi#function('ftok(', 'const char *pathname, int proj_id)', 'key_t', ' sys/types.h sys/ipc.h')
call cppapi#function('funlockfile(', 'FILE *filehandle)', '', 'stdio.h')
call cppapi#function('futimes(', 'int fd, const struct timeval tv[2])', 'int', 'sys/time.h')
call cppapi#function('fwide(', 'FILE *stream, int mode)', 'int', 'wchar.h')
call cppapi#function('fwrite(', 'const void *ptr, size_t size, size_t nmemb, FILE *stream)', 'size_t', 'stdio.h')
call cppapi#function('gai_strerror(', 'int errcode)', 'const char ', 'sys/types.h sys/socket.h netdb.h')
call cppapi#function('gcvt(', 'double number, size_t ndigit, char *buf)', 'char ', 'stdlib.h')
call cppapi#function('get_current_dir_name(', 'void)', 'char ', 'unistd.h')
call cppapi#function('getdate(', 'const char *string)', 'struct tm ', 'time.h')
call cppapi#function('getdate_r (', 'const char *string, struct tm *res)', 'int', 'time.h')
call cppapi#function('getenv(', 'const char *name)', 'char ', 'stdlib.h')
call cppapi#function('getfsent(', 'void)', 'struct fstab ', 'fstab.h')
call cppapi#function('getfsfile(', 'const char *mount_point)', 'struct fstab ', 'fstab.h')
call cppapi#function('getfsspec(', 'const char *special_file)', 'struct fstab ', 'fstab.h')
call cppapi#function('getgrent(', 'void)', 'struct group ', 'sys/types.h grp.h')
call cppapi#function('getgrent_r(', 'struct group *grp, char *buf, int buflen)', 'struct group *', 'grp.h stdio.h')
call cppapi#function('getgrent_r(', 'struct group *grp, char *buf, int buflen, FILE **gr_fp)', 'int', 'grp.h stdio.h')
call cppapi#function('getgrgid(', 'gid_t gid)', 'struct group ', 'sys/types.h grp.h')
call cppapi#function('getgrnam(', 'const char *name)', 'struct group ', 'sys/types.h grp.h')
call cppapi#function('getlogin(', 'void)', 'char ', 'stdio.h')
call cppapi#function('getlogin_r(', 'char *buf, size_t bufsize)', 'int', 'stdio.h')
call cppapi#function('getmntent(', 'FILE *fp)', 'struct mntent ', 'mntent.h')
call cppapi#function('getnetbyaddr(', 'long net, int type)', 'struct netent ', 'netdb.h')
call cppapi#function('getnetbyname(', 'const char *name)', 'struct netent ', 'netdb.h')
call cppapi#function('getnetent(', 'void)', 'struct netent ', 'netdb.h')
call cppapi#function('getopt(', 'int argc, char * const argv[], const char *optstring)', 'int', 'getopt.h')
call cppapi#function('getpass(', ' const char * prompt )', 'char ', 'unistd.h')
call cppapi#function('getprotobyname(', 'const char *name)', 'struct protoent ', 'netdb.h')
call cppapi#function('getprotobynumber(', 'int proto)', 'struct protoent ', 'netdb.h')
call cppapi#function('getprotoent(', 'void)', 'struct protoent ', 'netdb.h')
call cppapi#function('getpw(', 'uid_t uid, char *buf)', 'int', 'sys/types.h pwd.h')
call cppapi#function('getpwent(', 'void)', 'struct passwd ', 'sys/types.h pwd.h')
call cppapi#function('getpwent_r(', 'struct passwd *pwd, char *buf, int buflen)', 'struct passwd *', 'pwd.h stdio.h')
call cppapi#function('getpwent_r(', 'struct passwd *pwd, char *buf, int buflen, FILE **pw_fp)', 'int', 'pwd.h stdio.h')
call cppapi#function('getpwnam(', 'const char *name)', 'struct passwd ', 'sys/types.h pwd.h')
call cppapi#function('getpwuid(', 'uid_t uid)', 'struct passwd ', 'sys/types.h pwd.h')
call cppapi#function('getservbyname(', 'const char *name, const char *proto)', 'struct servent ', 'netdb.h')
call cppapi#function('getservbyport(', 'int port, const char *proto)', 'struct servent ', 'netdb.h')
call cppapi#function('getservent(', 'void)', 'struct servent ', 'netdb.h')
call cppapi#function('getsubopt(', 'char **optionp, char *const *tokens, char valuep)', 'int', '500 stdlib.h assert.h')
call cppapi#function('getttyent(', 'void)', 'struct ttyent ', 'ttyent.h')
call cppapi#function('getttynam(', 'const char *name)', 'struct ttyent ', 'ttyent.h')
call cppapi#function('getumask(', 'void)', 'mode_t', 'sys/types.h sys/stat.h')
call cppapi#function('getusershell(', 'void)', 'char ', 'unistd.h')
call cppapi#function('getutent_r(', 'struct utmp *ubuf, struct utmp **ubufp)', 'int', 'string.h stdlib.h pwd.h unistd.h')
call cppapi#function('getutid_r(', 'struct utmp *ut, struct utmp *ubuf, struct utmp **ubufp)', 'int', 'string.h stdlib.h pwd.h unistd.h')
call cppapi#function('getutline(', 'struct utmp *ut)', '', 'utmpx.h')
call cppapi#function('getutline_r(', 'struct utmp *ut, struct utmp *ubuf, struct utmp **ubufp)', 'int', 'string.h stdlib.h pwd.h unistd.h')
call cppapi#function('getw(', 'FILE *stream)', 'int', 'stdio.h')
call cppapi#function('getwc(', 'FILE *stream)', 'wint_t', 'stdio.h wchar.h')
call cppapi#function('getwchar(', 'void)', 'wint_t', 'wchar.h')
call cppapi#function('getwd(', 'char *buf)', 'char ', 'unistd.h')
call cppapi#function('globfree(', 'glob_t *pglob)', 'void', 'glob.h')
call cppapi#function('grantpt(', 'int fd)', 'int', 'stdlib.h')
call cppapi#function('gsignal(', 'signum)', 'int', 'signal.h')
call cppapi#function('hasmntopt(', 'const struct mntent *mnt, const char *opt)', 'char ', 'mntent.h')
call cppapi#function('hcreate(', 'size_t nel)', 'int', 'search.h')
call cppapi#function('hcreate_r(', 'size_t nel, struct hsearch_data *tab)', 'int', 'stdio.h stdlib.h search.h')
call cppapi#function('hdestroy(', 'void)', 'void', 'search.h')
call cppapi#function('hdestroy_r(', 'struct hsearch_data *tab)', 'void', 'stdio.h stdlib.h search.h')
call cppapi#function('hsearch(', 'ENTRY item, ACTION action)', 'ENTRY ', 'search.h')
call cppapi#function('htonl(', 'uint32_t hostlong)', 'uint32_t', 'arpa/inet.h')
call cppapi#function('htons(', 'uint16_t hostshort)', 'uint16_t', 'arpa/inet.h')
call cppapi#function('hypotl(', 'long double x, long double y)', '', 'math.h')
call cppapi#function('iconv_close(', 'iconv_t cd)', 'int', 'iconv.h')
call cppapi#function('iconv_open(', 'const char *tocode, const char *fromcode)', 'iconv_t', 'iconv.h')
call cppapi#function('ilogb(', 'double x)', 'int', 'math.h')
call cppapi#function('ilogbf(', 'float x)', 'int', 'math.h')
call cppapi#function('ilogbl(', 'long double x)', 'int', 'math.h')
call cppapi#function('imaxabs(', 'intmax_t j)', 'intmax_t', 'inttypes.h')
call cppapi#function('imaxdiv(', 'intmax_t numerator, intmax_t denominator)', 'imaxdiv_t', 'inttypes.h')
call cppapi#function('index(', 'const char *s, int c)', 'char ', 'string.h')
call cppapi#function('index(', 'const char *s, int c)', 'char ', 'strings.h')
call cppapi#function('inet_addr(', 'const char *cp)', 'in_addr_t', 'sys/socket.h netinet/in.h arpa/inet.h')
call cppapi#function('inet_aton(', 'const char *cp, struct in_addr *inp)', 'int', 'sys/socket.h netinet/in.h arpa/inet.h')
call cppapi#function('inet_lnaof(', 'struct in_addr in)', 'in_addr_t', 'sys/socket.h netinet/in.h arpa/inet.h')
call cppapi#function('inet_makeaddr(', 'int net, int host)', 'struct in_addr', 'sys/socket.h netinet/in.h arpa/inet.h')
call cppapi#function('inet_netof(', 'struct in_addr in)', 'in_addr_t', 'sys/socket.h netinet/in.h arpa/inet.h')
call cppapi#function('inet_network(', 'const char *cp)', 'in_addr_t', 'sys/socket.h netinet/in.h arpa/inet.h')
call cppapi#function('inet_ntoa(', 'struct in_addr in)', 'char ', 'sys/socket.h netinet/in.h arpa/inet.h')
call cppapi#function('inet_ntop(', 'int af, const void *src, char *dst, socklen_t cnt)', 'const char ', 'sys/types.h sys/socket.h arpa/inet.h')
call cppapi#function('inet_pton(', 'int af, const char *src, void *dst)', 'int', 'sys/types.h sys/socket.h arpa/inet.h')
call cppapi#function('infnan(', 'int error)', 'double', 'math.h errno.h')
call cppapi#function('initgroups(', 'const char *user, gid_t group)', 'int', 'sys/types.h grp.h')
call cppapi#function('insque(', 'void *elem, void *prev)', 'void', 'search.h')
call cppapi#function('isalnum(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isalpha(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isascii(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isatty(', 'int desc)', 'int', 'unistd.h')
call cppapi#function('isblank(', 'int c)', 'int', 'ctype.h')
call cppapi#function('iscntrl(', 'int c)', 'int', 'ctype.h')
call cppapi#function('iscntrl(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isdigit(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isdigit(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isfinite(', 'x)', 'int', 'math.h')
call cppapi#function('isgraph(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isgraph(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isgreater(', 'x,y)', 'int', 'math.h')
call cppapi#function('isgreaterequal(', 'x,y)', 'int', 'math.h')
call cppapi#function('isinf(', 'double x)', 'int', 'math.h')
call cppapi#function('isinf(', 'x)', 'int', 'math.h')
call cppapi#function('isinff(', 'float x)', 'int', 'math.h')
call cppapi#function('isinfl(', 'long double x)', 'int', 'math.h')
call cppapi#function('isless(', 'x,y)', 'int', 'math.h')
call cppapi#function('islessequal(', 'x,y)', 'int', 'math.h')
call cppapi#function('islessgreater(', 'x,y)', 'int', 'math.h')
call cppapi#function('islower(', 'int c)', 'int', 'ctype.h')
call cppapi#function('islower(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isnan(', 'double x)', 'int', 'math.h')
call cppapi#function('isnan(', 'x)', 'int', 'math.h')
call cppapi#function('isnanf(', 'float x)', 'int', 'math.h')
call cppapi#function('isnanl(', 'long double x)', 'int', 'math.h')
call cppapi#function('isnormal(', 'x)', 'int', 'math.h')
call cppapi#function('isprint(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isprint(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isprint(', 'int c)', 'int', 'ctype.h')
call cppapi#function('ispunct(', 'int c)', 'int', 'ctype.h')
call cppapi#function('ispunct(', 'int c)', 'int', 'ctype.h')
call cppapi#function('ispunct(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isspace(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isspace(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isspace(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isunordered(', 'x,y)', 'int', 'math.h')
call cppapi#function('isupper(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isupper(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isupper(', 'int c)', 'int', 'ctype.h')
call cppapi#function('iswalnum(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswalpha(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswblank(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswcntrl(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswctype(', 'wint_t wc, wctype_t desc)', 'int', 'wctype.h')
call cppapi#function('iswdigit(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswgraph(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswlower(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswprint(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswpunct(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswspace(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswupper(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('iswxdigit(', 'wint_t wc)', 'int', 'wctype.h')
call cppapi#function('isxdigit(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isxdigit(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isxdigit(', 'int c)', 'int', 'ctype.h')
call cppapi#function('isxdigit(', 'int c)', 'int', 'ctype.h')
call cppapi#function('jrand48(', 'unsigned short xsubi[3])', 'long int', 'stdlib.h')
call cppapi#function('key_decryptsession(', 'const char *remotename, des_block *deskey)', 'int', 'rpc/rpc.h')
call cppapi#function('key_encryptsession(', 'const char *remotename, des_block *deskey)', 'int', 'rpc/rpc.h')
call cppapi#function('key_gendes(', 'des_block *deskey)', 'int', 'rpc/rpc.h')
call cppapi#function('key_secretkey_is_set(', 'void)', 'int', 'rpc/rpc.h')
call cppapi#function('key_setsecret(', 'const char *key)', 'int', 'rpc/rpc.h')
call cppapi#function('killpg(', 'pid_t pgrp, int signal)', 'int', 'signal.h')
call cppapi#function('l64a(', 'long value)', 'char ', 'stdlib.h')
call cppapi#function('lcong48(', 'unsigned short param[7])', 'void', 'stdlib.h')
call cppapi#function('lcong48_r(', 'unsigned short int param[7], struct drand48_data *buffer)', 'int', 'stdlib.h')
call cppapi#function('ldexpl(', 'long double x, int exp)', '', 'math.h')
call cppapi#function('lgamma_r(', 'double x, int *signp)', 'double', 'math.h')
call cppapi#function('lgammaf_r(', 'float x, int *signp)', 'float', 'math.h')
call cppapi#function('lgammal_r(', 'long double x, int *signp)', 'long double', 'math.h')
call cppapi#function('lgammal_r(', 'long double x, int *signp)', 'long double', 'math.h')
call cppapi#function('lldiv(', 'long long numerator, long long denominator)', 'lldiv_t', 'stdlib.h')
call cppapi#function('llrintl(', 'long double x)', '', 'math.h')
call cppapi#function('llseek(', 'int fd, loff_t offset, int whence)', 'loff_t', 'sys/types.h unistd.h')
call cppapi#function('localeconv(', 'void)', 'struct lconv ', 'locale.h')
call cppapi#function('lockf(', 'int fd, int cmd, off_t len)', 'int', 'unistd.h')
call cppapi#function('log(', 'double x)', 'double', 'math.h')
call cppapi#function('log2(', 'double x)', 'double', 'math.h')
call cppapi#function('log2f(', 'float x)', 'float', 'math.h')
call cppapi#function('log2l(', 'long double x)', 'long double', 'math.h')
call cppapi#function('logb(', 'double x)', 'double', 'math.h')
call cppapi#function('logbf(', 'float x)', 'float', 'math.h')
call cppapi#function('logbl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('logf(', 'float x)', 'float', 'math.h')
call cppapi#function('logl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('longjmp(', 'jmp_buf env, int val)', 'void', 'setjmp.h')
call cppapi#function('lrand48(', 'void)', 'long int', 'stdlib.h')
call cppapi#function('lrand48_r(', 'struct drand48_data *buffer, long int *result)', 'int', 'stdlib.h')
call cppapi#function('lseek(', 'int fd, off_t offset, int whence)', 'off_t', 'sys/types.h unistd.h')
call cppapi#function('lseek64(', 'int fd, off64_t offset, int whence)', 'off64_t', 'sys/types.h unistd.h')
call cppapi#function('lseek64(', 'int fd, off64_t offset, int whence)', 'off64_t', 'sys/types.h unistd.h')
call cppapi#function('mainderl(', 'long double x, long double y)', 'long double', 'math.h')
call cppapi#function('mblen(', 'const char *s, size_t n)', 'int', 'stdlib.h')
call cppapi#function('mbrlen(', 'const char *s, size_t n, mbstate_t *ps)', 'size_t', 'wchar.h')
call cppapi#function('mbrtowc(', 'wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)', 'size_t', 'wchar.h')
call cppapi#function('mbsinit(', 'const mbstate_t *ps)', 'int', 'wchar.h')
call cppapi#function('mbsrtowcs(', 'wchar_t *dest, const char **src, size_t len, mbstate_t *ps)', 'size_t', 'wchar.h')
call cppapi#function('mbstowcs(', 'wchar_t *dest, const char *src, size_t n)', 'size_t', 'stdlib.h')
call cppapi#function('mbtowc(', 'wchar_t *pwc, const char *s, size_t n)', 'int', 'stdlib.h')
call cppapi#function('memalign(', 'size_t boundary, size_t size)', 'void ', 'stdlib.h')
call cppapi#function('memccpy(', 'void *dest, const void *src, int c, size_t n)', 'void ', 'string.h')
call cppapi#function('memccpy(', 'void *dest, const void *src, int c, size_t n)', 'void ', 'string.h')
call cppapi#function('memchr(', 'const void *s, int c, size_t n)', 'void ', 'string.h')
call cppapi#function('memchr(', 'const void *s, int c, size_t n)', 'void ', 'string.h')
call cppapi#function('memcmp(', 'const void *s1, const void *s2, size_t n)', 'int', 'string.h')
call cppapi#function('memcmp(', 'const void *s1, const void *s2, size_t n)', 'int', 'string.h')
call cppapi#function('memcpy(', 'void *dest, const void *src, size_t n)', 'void ', 'string.h')
call cppapi#function('memcpy(', 'void *dest, const void *src, size_t n)', 'void ', 'string.h')
call cppapi#function('memfrob(', 'void *s, size_t n)', 'void ', 'string.h')
call cppapi#function('memfrob(', 'void *s, size_t n)', 'void ', 'string.h')
call cppapi#function('memmove(', 'void *dest, const void *src, size_t n)', 'void ', 'string.h')
call cppapi#function('memmove(', 'void *dest, const void *src, size_t n)', 'void ', 'string.h')
call cppapi#function('mempcpy(', 'void *dest, const void *src, size_t n)', 'void ', 'wchar.h')
call cppapi#function('memrchr(', 'const void *s, int c, size_t n)', 'void ', 'string.h')
call cppapi#function('memset(', 'void *s, int c, size_t n)', 'void ', 'string.h')
call cppapi#function('memset(', 'void *s, int c, size_t n)', 'void ', 'string.h')
call cppapi#function('mkdtemp(', 'char *template)', 'char ', 'stdlib.h')
call cppapi#function('mkfifo(', 'const char *pathname, mode_t mode)', 'int', 'sys/types.h sys/stat.h')
call cppapi#function('mkfifoat(', 'int dirfd, const char *pathname, mode_t mode)', 'int', 'sys/stat.h')
call cppapi#function('mkstemp(', 'char *template)', 'int', 'stdlib.h')
call cppapi#function('mktemp(', 'char *template)', 'char ', 'stdlib.h')
call cppapi#function('mktime(', 'struct tm *tm)', 'time_t', 'time.h')
call cppapi#function('mpool_close (', 'MPOOL *mp)', 'int', 'db.h mpool.h')
call cppapi#function('mpool_get (', 'MPOOL *mp, pgno_t pgno, u_int flags)', 'void *', 'db.h mpool.h')
call cppapi#function('mpool_new (', 'MPOOL *mp, pgno_t *pgnoaddr)', 'void *', 'db.h mpool.h')
call cppapi#function('mpool_open (', 'DBT *key, int fd, pgno_t pagesize, pgno_t maxcache)', 'MPOOL *', 'db.h mpool.h')
call cppapi#function('mpool_put (', 'MPOOL *mp, void *pgaddr, u_int flags)', 'int', 'db.h mpool.h')
call cppapi#function('mpool_sync (', 'MPOOL *mp)', 'int', 'db.h mpool.h')
call cppapi#function('mq_close(', 'mqd_t mqdes)', 'mqd_t', 'mqueue.h')
call cppapi#function('mq_notify(', 'mqd_t mqdes, const struct sigevent *notification)', 'mqd_t', 'pthread.h mqueue.h assert.h stdio.h')
call cppapi#function('mq_unlink(', 'const char *name)', 'mqd_t', 'mqueue.h')
call cppapi#function('mrand48(', 'void)', 'long int', 'stdlib.h')
call cppapi#function('mrand48_r(', 'struct drand48_data *buffer,long int *result)', 'int', 'stdlib.h')
call cppapi#function('mtrace(', 'void)', 'void', 'mcheck.h')
call cppapi#function('muntrace(', 'void)', 'void', 'mcheck.h')
call cppapi#function('nextafterl(', 'long double x, long double y)', 'double', 'math.h')
call cppapi#function('nl_langinfo(', 'nl_item item)', 'char ', 'langinfo.h')
call cppapi#function('nrand48(', 'unsigned short xsubi[3])', 'long int', 'stdlib.h')
call cppapi#function('ntohl(', 'uint32_t netlong)', 'uint32_t', 'arpa/inet.h')
call cppapi#function('ntohs(', 'uint16_t netshort)', 'uint16_t', 'arpa/inet.h')
call cppapi#function('offsetof(', 'type, member)', 'size_t', 'stddef.h stdio.h stdlib.h')
call cppapi#function('opendir(', 'const char *name)', 'DIR ', 'sys/types.h dirent.h')
call cppapi#function('passwd2des(', 'char *passwd, char *key)', 'void', 'rpc/des_crypt.h')
call cppapi#function('pathconf(', 'char *path, int name)', 'long', 'unistd.h')
call cppapi#function('pclose(', 'FILE *stream)', 'int', 'stdio.h')
call cppapi#function('perror(', 'const char *s)', 'void', 'errno.h')
call cppapi#function('popen(', 'const char *command, const char *type)', 'FILE ', 'stdio.h')
call cppapi#function('posix_fallocate(', 'int fd, off_t offset, off_t len)', 'int', '600 stdlib.h')
call cppapi#function('posix_memalign(', 'void **memptr, size_t alignment, size_t size)', 'int', 'malloc.h')
call cppapi#function('posix_openpt(', 'int flags)', 'int', '600 stdlib.h fcntl.h')
call cppapi#function('profil(', 'u_short *buf, size_t bufsiz, size_t offset, u_int scale)', 'int', 'unistd.h')
call cppapi#function('psignal(', 'int sig, const char *s)', 'void', 'signal.h')
call cppapi#function('pthread_attr_destroy(', 'pthread_attr_t *attr)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_getdetachstate(', 'const pthread_attr_t *attr, int *detachstate)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_getguardsize(', 'const pthread_attr_t *attr, size_t *guardsize)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_getinheritsched(', 'const pthread_attr_t *attr, int *inherit)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_getschedpolicy(', 'const pthread_attr_t *attr, int *policy)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_getscope(', 'const pthread_attr_t *attr, int *scope)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_getstackaddr(', 'const pthread_attr_t *attr, void **stackaddr)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_getstacksize(', 'const pthread_attr_t *attr, size_t *stacksize)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_init(', 'pthread_attr_t *attr)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_setdetachstate(', 'pthread_attr_t *attr, int detachstate)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_setguardsize(', 'pthread_attr_t *attr, size_t guardsize)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_setinheritsched(', 'pthread_attr_t *attr, int inherit)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_setschedpolicy(', 'pthread_attr_t *attr, int policy)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_setscope(', 'pthread_attr_t *attr, int scope)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_setstackaddr(', 'pthread_attr_t *attr, void *stackaddr)', 'int', 'pthread.h')
call cppapi#function('pthread_attr_setstacksize(', 'pthread_attr_t *attr, size_t stacksize)', 'int', 'pthread.h')
call cppapi#function('pthread_cancel(', 'pthread_t thread)', 'int', 'pthread.h')
call cppapi#function('pthread_cleanup_pop(', 'int execute)', 'void', 'pthread.h')
call cppapi#function('pthread_cleanup_pop_restore_np(', 'int execute)', 'void', 'pthread.h')
call cppapi#function('pthread_cleanup_push(', 'void (*routine) (void *), void *arg)', 'void', 'pthread.h')
call cppapi#function('pthread_cleanup_push_defer_np(', 'void (*routine) (void *), void *arg)', 'void', 'pthread.h')
call cppapi#function('pthread_cond_broadcast(', 'pthread_cond_t *cond)', 'int', 'pthread.h')
call cppapi#function('pthread_cond_destroy(', 'pthread_cond_t *cond)', 'int', 'pthread.h')
call cppapi#function('pthread_cond_init(', 'pthread_cond_t *cond, pthread_condattr_t *cond_attr)', 'int', 'pthread.h')
call cppapi#function('pthread_cond_signal(', 'pthread_cond_t *cond)', 'int', 'pthread.h')
call cppapi#function('pthread_cond_wait(', 'pthread_cond_t *cond, pthread_mutex_t *mutex)', 'int', 'pthread.h')
call cppapi#function('pthread_condattr_destroy(', 'pthread_condattr_t *attr)', 'int', 'pthread.h')
call cppapi#function('pthread_condattr_getpshared(', 'const pthread_condattr_t *attr, int *pshared)', 'int', 'pthread.h')
call cppapi#function('pthread_condattr_init(', 'pthread_condattr_t *attr)', 'int', 'pthread.h')
call cppapi#function('pthread_condattr_setpshared(', 'pthread_condattr_t *attr, int pshared)', 'int', 'pthread.h')
call cppapi#function('pthread_detach(', 'pthread_t th)', 'int', 'pthread.h')
call cppapi#function('pthread_equal(', 'pthread_t thread1, pthread_t thread2)', 'int', 'pthread.h')
call cppapi#function('pthread_exit(', 'void *retval)', 'void', 'pthread.h')
call cppapi#function('pthread_getspecific(', 'pthread_key_t key)', 'void *', 'pthread.h')
call cppapi#function('pthread_join(', 'pthread_t th, void **thread_return)', 'int', 'pthread.h')
call cppapi#function('pthread_key_create(', 'pthread_key_t *key, void (*destr_function) (void *))', 'int', 'pthread.h')
call cppapi#function('pthread_key_delete(', 'pthread_key_t key)', 'int', 'pthread.h')
call cppapi#function('pthread_kill(', 'pthread_t thread, int signo)', 'int', 'pthread.h signal.h')
call cppapi#function('pthread_kill_other_threads_np(', 'void)', 'void', 'pthread.h')
call cppapi#function('pthread_mutex_destroy(', 'pthread_mutex_t *mutex)', 'int', 'pthread.h')
call cppapi#function('pthread_mutex_lock(', 'pthread_mutex_t *mutex)', 'int', 'pthread.h')
call cppapi#function('pthread_mutex_trylock(', 'pthread_mutex_t *mutex)', 'int', 'pthread.h')
call cppapi#function('pthread_mutex_unlock(', 'pthread_mutex_t *mutex)', 'int', 'pthread.h')
call cppapi#function('pthread_mutexattr_destroy(', 'pthread_mutexattr_t *attr)', 'int', 'pthread.h')
call cppapi#function('pthread_mutexattr_gettype(', 'const pthread_mutexattr_t *attr, int *kind)', 'int', 'pthread.h')
call cppapi#function('pthread_mutexattr_init(', 'pthread_mutexattr_t *attr)', 'int', 'pthread.h')
call cppapi#function('pthread_mutexattr_setpshared(', 'pthread_mutexattr_t *attr, int pshared)', 'int', 'pthread.h')
call cppapi#function('pthread_mutexattr_settype(', 'pthread_mutexattr_t *attr, int kind)', 'int', 'pthread.h')
call cppapi#function('pthread_once(', 'pthread_once_t *once_control, void (*init_routine) (void))', 'int', 'pthread.h')
call cppapi#function('pthread_self(', 'void)', 'pthread_t', 'pthread.h')
call cppapi#function('pthread_setcancelstate(', 'int state, int *oldstate)', 'int', 'pthread.h')
call cppapi#function('pthread_setcanceltype(', 'int type, int *oldtype)', 'int', 'pthread.h')
call cppapi#function('pthread_setspecific(', 'pthread_key_t key, const void *pointer)', 'int', 'pthread.h')
call cppapi#function('pthread_sigmask(', 'int how, const sigset_t *newmask, sigset_t *oldmask)', 'int', 'pthread.h signal.h')
call cppapi#function('pthread_testcancel(', 'void)', 'void', 'pthread.h')
call cppapi#function('ptsname(', 'int fd)', 'char ', 'stdlib.h')
call cppapi#function('ptsname_r(', 'int fd, char *buf, size_t buflen)', 'char ', 'stdlib.h')
call cppapi#function('putc(', 'int c, FILE *stream)', '', 'stdio.h')
call cppapi#function('putchar(', 'int c)', 'int', 'stdio.h')
call cppapi#function('putenv(', 'char *string)', 'int', 'stdlib.h')
call cppapi#function('putgrent(', 'const struct group *grp, FILE *fp)', 'int', 'grp.h')
call cppapi#function('putpwent(', 'const struct passwd *p, FILE *stream)', 'int', 'stdio.h sys/types.h pwd.h')
call cppapi#function('puts(', 'const char *s)', 'int', 'stdio.h')
call cppapi#function('pututline(', 'struct utmp *ut)', 'struct utmp ', 'utmpx.h')
call cppapi#function('putw(', 'int w, FILE *stream)', 'int', 'stdio.h')
call cppapi#function('putwchar(', 'wchar_t wc)', 'wint_t', 'wchar.h')
call cppapi#function('pw_auth (', 'char *command, char *user, int reason, char *input)', 'int', 'pwauth.h')
call cppapi#function('qecvt(', 'long double number, int ndigits, int *decpt, int *sign)', 'char ', 'stdlib.h')
call cppapi#function('qfcvt(', 'long double number, int ndigits, int *decpt, int *sign)', 'char ', 'stdlib.h')
call cppapi#function('qgcvt(', 'long double number, int ndigit, char *buf)', 'char ', 'stdlib.h')
call cppapi#function('quol(', 'long double x, long double y, int *quo)', 'long double', 'math.h')
call cppapi#function('raise(', 'int sig)', 'int', 'signal.h')
call cppapi#function('rand(', 'void)', 'int', 'stdlib.h')
call cppapi#function('rand_r(', 'unsigned int *seedp)', 'int', 'stdlib.h')
call cppapi#function('re_comp(', 'char *regex)', 'char ', 'sys/types.h regex.h')
call cppapi#function('re_exec(', 'char *string)', 'int', 'sys/types.h regex.h')
call cppapi#function('readdir(', 'DIR *dir)', 'struct dirent ', 'sys/types.h')
call cppapi#function('realpath(', 'const char *path, char *resolved_path)', 'char ', 'limits.h stdlib.h')
call cppapi#function('regfree(', 'regex_t *preg)', 'void', 'sys/types.h regex.h')
call cppapi#function('remove(', 'const char *pathname)', 'int', 'stdio.h')
call cppapi#function('remque(', 'void *elem)', 'void', 'search.h')
call cppapi#function('res_init(', 'void)', 'int', 'netinet/in.h arpa/nameser.h resolv.h')
call cppapi#function('rewind(', 'FILE *stream)', 'void', 'stdio.h')
call cppapi#function('rewinddir(', 'DIR *dir)', 'void', 'sys/types.h')
call cppapi#function('rindex(', 'const char *s, int c)', 'char ', 'string.h')
call cppapi#function('rindex(', 'const char *s, int c)', 'char ', 'strings.h')
call cppapi#function('rint(', 'double x)', 'double', 'math.h')
call cppapi#function('rintf(', 'float x)', 'float', 'math.h')
call cppapi#function('rintl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('rpmatch(', 'const char *response)', 'int', 'locale.h stdlib.h')
call cppapi#function('scalbl(', 'long double x, double exp)', 'double', 'math.h')
call cppapi#function('scalbln(', 'double x, long int exp)', 'double', 'math.h')
call cppapi#function('scalblnf(', 'float x, long int exp)', 'float', 'math.h')
call cppapi#function('scalblnl(', 'long double x, long int exp)', 'long double', 'math.h')
call cppapi#function('scalblnl(', 'long double x, long int exp)', 'long double', 'math.h')
call cppapi#function('scalbnl(', 'long double x, int exp)', '', 'math.h')
call cppapi#function('seed48(', 'unsigned short seed16v[3])', 'unsigned short ', 'stdlib.h')
call cppapi#function('seed48_r(', 'unsigned short int seed16v[3], struct drand48_data *buffer)', 'int', 'stdlib.h')
call cppapi#function('seekdir(', 'DIR *dir, off_t offset)', 'void', 'dirent.h')
call cppapi#function('sem_close(', 'sem_t *sem)', 'int', 'semaphore.h')
call cppapi#function('sem_destroy(', 'sem_t *sem)', 'int', 'semaphore.h')
call cppapi#function('sem_getvalue(', 'sem_t *sem, int *sval)', 'int', 'semaphore.h')
call cppapi#function('sem_init(', 'sem_t *sem, int pshared, unsigned int value)', 'int', 'semaphore.h')
call cppapi#function('sem_post(', 'sem_t *sem)', 'int', 'semaphore.h')
call cppapi#function('sem_timedwait(', 'sem_t *sem, const struct timespec *abs_timeout)', 'int', 'unistd.h stdio.h stdlib.h')
call cppapi#function('sem_trywait(', 'sem_t *sem)', 'int', 'semaphore.h')
call cppapi#function('sem_unlink(', 'const char *name)', 'int', 'semaphore.h')
call cppapi#function('sem_wait(', 'sem_t *sem)', 'int', '600 semaphore.h')
call cppapi#function('setenv(', 'const char *name, const char *value, int overwrite)', 'int', 'stdlib.h')
call cppapi#function('setfsent(', 'void)', 'int', 'fstab.h')
call cppapi#function('setgrent(', 'void)', 'void', 'sys/types.h grp.h')
call cppapi#function('sethostent(', 'int stayopen)', 'void', '')
call cppapi#function('setjmp(', 'jmp_buf env)', 'int', 'setjmp.h')
call cppapi#function('setkey(', 'const char *key)', 'void', 'stdlib.h')
call cppapi#function('setlocale(', 'int category, const char *locale)', 'char ', 'locale.h')
call cppapi#function('setlogmask(', 'int mask)', 'int', 'syslog.h')
call cppapi#function('setmntent(', 'const char *filename, const char *type)', 'FILE ', 'mntent.h')
call cppapi#function('setnetent(', 'int stayopen)', 'void', 'netdb.h')
call cppapi#function('setproctitle(', 'NULL)', 'void', 'stdlib.h')
call cppapi#function('setprotoent(', 'int stayopen)', 'void', 'netdb.h')
call cppapi#function('setpwent(', 'void)', 'void', 'sys/types.h pwd.h')
call cppapi#function('setservent(', 'int stayopen)', 'void', 'netdb.h')
call cppapi#function('setttyent(', 'void)', 'int', 'ttyent.h')
call cppapi#function('setusershell(', 'void)', 'void', 'unistd.h')
call cppapi#function('setutent(', 'void)', 'void', 'utmpx.h')
call cppapi#function('sigaddset(', 'sigset_t *set, int signum)', 'int', 'signal.h')
call cppapi#function('sigblock(', 'int mask)', 'int', 'signal.h')
call cppapi#function('sigdelset(', 'sigset_t *set, int signum)', 'int', 'signal.h')
call cppapi#function('sigemptyset(', 'sigset_t *set)', 'int', 'signal.h')
call cppapi#function('sigfillset(', 'sigset_t *set)', 'int', 'signal.h')
call cppapi#function('siggetmask(', 'void)', 'int', 'signal.h')
call cppapi#function('sighandler_t sigset(', 'int sig, sighandler_t disp)', '', 'signal.h')
call cppapi#function('sighold(', 'int sig)', 'int', '500 signal.h')
call cppapi#function('sigignore(', 'int sig)', 'int', '500 signal.h')
call cppapi#function('siginterrupt(', 'int sig, int flag)', 'int', 'signal.h')
call cppapi#function('sigisemptyset(', 'sigset_t *set)', 'int', 'signal.h')
call cppapi#function('sigismember(', 'const sigset_t *set, int signum)', 'int', 'signal.h')
call cppapi#function('siglongjmp(', 'sigjmp_buf env, int val)', 'void', 'setjmp.h')
call cppapi#function('sigmask(', 'int signum)', 'int', 'signal.h')
call cppapi#function('signbit(', 'X)', 'int', 'math.h')
call cppapi#function('significandl(', 'long double x)', '', 'math.h')
call cppapi#function('sigrelse(', 'int sig)', 'int', '500 signal.h')
call cppapi#function('sigsetjmp(', 'sigjmp_buf env, int savesigs)', 'int', 'setjmp.h')
call cppapi#function('sigsetmask(', 'int mask)', 'int', 'signal.h')
call cppapi#function('sigvec(', 'int sig, struct sigvec *vec, struct sigvec *ovec)', 'int', 'signal.h')
call cppapi#function('sigwait(', 'const sigset_t *set, int *sig)', 'int', 'pthread.h signal.h')
call cppapi#function('sin(', 'double x)', 'double', 'math.h')
call cppapi#function('sinf(', 'float x)', 'float', 'math.h')
call cppapi#function('sinh(', 'double x)', 'double', 'math.h')
call cppapi#function('sinhf(', 'float x)', 'float', 'math.h')
call cppapi#function('sinhl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('sinl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('sleep(', 'unsigned int seconds)', 'unsigned int', 'unistd.h')
call cppapi#function('sockatmark(', 'int fd)', 'int', 'sys/socket.h')
call cppapi#function('sqrt(', 'double x)', 'double', 'math.h')
call cppapi#function('sqrtf(', 'float x)', 'float', 'math.h')
call cppapi#function('sqrtl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('srand(', 'unsigned int seed)', 'void', 'stdlib.h')
call cppapi#function('srand48(', 'long int seedval)', 'void', 'stdlib.h')
call cppapi#function('srand48_r(', 'long int seedval, struct drand48_data *buffer)', 'int', 'stdlib.h')
call cppapi#function('ssignal(', 'int signum, sighandler_t action)', 'sighandler_t', 'signal.h')
call cppapi#function('stpcpy(', 'char *dest, const char *src)', 'char ', 'string.h')
call cppapi#function('stpncpy(', 'char *dest, const char *src, size_t n)', 'char ', 'string.h')
call cppapi#function('strcasecmp(', 'const char *s1, const char *s2)', 'int', 'string.h')
call cppapi#function('strcasecmp(', 'const char *s1, const char *s2)', 'int', 'strings.h')
call cppapi#function('strcasestr(', 'const char *haystack, const char *needle)', 'char ', 'string.h')
call cppapi#function('strcat(', 'char *dest, const char *src)', 'char ', 'string.h')
call cppapi#function('strcat(', 'char *dest, const char *src)', 'char ', 'strings.h')
call cppapi#function('strchr(', 'const char *s, int c)', 'char ', 'string.h')
call cppapi#function('strchr(', 'const char *s, int c)', 'char ', 'strings.h')
call cppapi#function('strchrnul(', 'const char *s, int c)', 'char ', 'string.h')
call cppapi#function('strcmp(', 'const char *s1, const char *s2)', 'int', 'string.h')
call cppapi#function('strcmp(', 'const char *s1, const char *s2)', 'int', 'strings.h')
call cppapi#function('strcoll(', 'const char *s1, const char *s2)', 'int', 'string.h')
call cppapi#function('strcoll(', 'const char *s1, const char *s2)', 'int', 'strings.h')
call cppapi#function('strcpy(', 'char *dest, const char *src)', 'char ', 'string.h')
call cppapi#function('strcpy(', 'char *dest, const char *src)', 'char ', 'strings.h')
call cppapi#function('strcspn(', 'const char *s, const char *reject)', 'size_t', 'string.h')
call cppapi#function('strcspn(', 'const char *s, const char *reject)', 'size_t', 'strings.h')
call cppapi#function('strdup(', 'const char *s)', 'char ', 'string.h')
call cppapi#function('strdup(', 'const char *s)', 'char ', 'strings.h')
call cppapi#function('strerror(', 'int errnum)', 'char ', '600 string.h')
call cppapi#function('strfmon(', 'char *s, size_t max, const char *format, ...)', 'ssize_t', 'monetary.h')
call cppapi#function('strfry(', 'char *string)', 'char ', 'string.h')
call cppapi#function('strfry(', 'char *string)', 'char ', 'strings.h')
call cppapi#function('strftime(', 'char *s, size_t max, const char *format, const struct tm *tm)', 'size_t', 'time.h stdio.h stdlib.h')
call cppapi#function('strlen(', 'const char *s)', 'size_t', 'string.h')
call cppapi#function('strlen(', 'const char *s)', 'size_t', 'strings.h')
call cppapi#function('strncasecmp(', 'const char *s1, const char *s2, size_t n)', 'int', 'string.h')
call cppapi#function('strncasecmp(', 'const char *s1, const char *s2, size_t n)', 'int', 'strings.h')
call cppapi#function('strncat(', 'char *dest, const char *src, size_t n)', 'char ', 'string.h')
call cppapi#function('strncat(', 'char *dest, const char *src, size_t n)', 'char ', 'strings.h')
call cppapi#function('strncmp(', 'const char *s1, const char *s2, size_t n)', 'int', 'string.h')
call cppapi#function('strncmp(', 'const char *s1, const char *s2, size_t n)', 'int', 'strings.h')
call cppapi#function('strncpy(', 'char *dest, const char *src, size_t n)', 'char ', 'string.h')
call cppapi#function('strncpy(', 'char *dest, const char *src, size_t n)', 'char ', 'strings.h')
call cppapi#function('strndupa(', 'const char *s, size_t n)', '', 'string.h')
call cppapi#function('strnlen(', 'const char *s, size_t maxlen)', 'size_t', 'string.h')
call cppapi#function('strpbrk(', 'const char *s, const char *accept)', 'char ', 'string.h')
call cppapi#function('strpbrk(', 'const char *s, const char *accept)', 'char ', 'strings.h')
call cppapi#function('strptime(', 'const char *s, const char *format, struct tm *tm)', 'char ', 'stdio.h time.h')
call cppapi#function('strrchr(', 'const char *s, int c)', 'char ', 'string.h')
call cppapi#function('strrchr(', 'const char *s, int c)', 'char ', 'strings.h')
call cppapi#function('strsep(', 'char **stringp, const char *delim)', 'char ', 'string.h')
call cppapi#function('strsep(', 'char **stringp, const char *delim)', 'char ', 'strings.h')
call cppapi#function('strsignal(', 'int sig)', 'char ', 'string.h')
call cppapi#function('strspn(', 'const char *s, const char *accept)', 'size_t', 'string.h')
call cppapi#function('strspn(', 'const char *s, const char *accept)', 'size_t', 'strings.h')
call cppapi#function('strstr(', 'const char *haystack, const char *needle)', 'char ', 'string.h')
call cppapi#function('strstr(', 'const char *haystack, const char *needle)', 'char ', 'strings.h')
call cppapi#function('strtod(', 'nptr, (char **) NULL)', '', 'stdlib.h')
call cppapi#function('strtok(', 'char *s, const char *delim)', 'char ', 'strings.h')
call cppapi#function('strtok(', 'char *str, const char *delim)', 'char ', 'stdio.h stdlib.h string.h')
call cppapi#function('strtok_r(', 'char *str, const char *delim, char **saveptr)', 'char ', 'stdio.h stdlib.h string.h')
call cppapi#function('strtol(', 'const char *nptr, char **endptr, int base)', 'long int', 'stdlib.h limits.h stdio.h errno.h')
call cppapi#function('strtoll(', 'const char *nptr, char **endptr, int base)', 'long long int', 'stdlib.h limits.h stdio.h errno.h')
call cppapi#function('strtoq(', 'const char *nptr, char **endptr, int base)', 'quad_t', 'stdlib.h limits.h stdio.h errno.h')
call cppapi#function('strtoul(', 'const char *nptr, char **endptr, int base)', 'unsigned long int', 'stdlib.h')
call cppapi#function('strtoull(', 'const char *nptr, char **endptr, int base)', 'unsigned long long int', 'stdlib.h')
call cppapi#function('strtoumax(', 'const char *nptr, char **endptr, int base)', '', 'inttypes.h')
call cppapi#function('strtouq(', 'const char *nptr, char **endptr, int base)', 'u_quad_t', 'stdlib.h')
call cppapi#function('strverscmp(', 'const char *s1, const char *s2)', 'int', 'string.h')
call cppapi#function('strxfrm(', 'char *dest, const char *src, size_t n)', 'size_t', 'string.h')
call cppapi#function('strxfrm(', 'char *dest, const char *src, size_t n)', 'size_t', 'strings.h')
call cppapi#function('swab(', 'const void *from, void *to, ssize_t n)', 'void', 'unistd.h')
call cppapi#function('sysconf(', 'int name)', 'long', 'unistd.h')
call cppapi#function('system(', 'const char *command)', 'int', 'stdlib.h')
call cppapi#function('sysv_signal(', 'int signum, sighandler_t handler)', 'sighandler_t', 'signal.h')
call cppapi#function('tan(', 'double x)', 'double', 'math.h')
call cppapi#function('tanf(', 'float x)', 'float', 'math.h')
call cppapi#function('tanh(', 'double x)', 'double', 'math.h')
call cppapi#function('tanhf(', 'float x)', 'float', 'math.h')
call cppapi#function('tanhl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('tanl(', 'long double x)', 'long double', 'math.h')
call cppapi#function('tcdrain(', 'int fd)', 'int', 'termios.h unistd.h')
call cppapi#function('tcflow(', 'int fd, int action)', 'int', 'termios.h unistd.h')
call cppapi#function('tcflush(', 'int fd, int queue_selector)', 'int', 'termios.h unistd.h')
call cppapi#function('tcgetattr(', 'int fd, struct termios *termios_p)', 'int', 'termios.h unistd.h')
call cppapi#function('tcgetpgrp(', 'int fd)', 'pid_t', 'unistd.h')
call cppapi#function('tcgetsid(', 'int fd)', 'pid_t', 'termios.h')
call cppapi#function('tcsendbreak(', 'int fd, int duration)', 'int', 'termios.h unistd.h')
call cppapi#function('tcsetattr(', 'int fd, int optional_actions, const struct termios *termios_p)', 'int', 'termios.h unistd.h')
call cppapi#function('tcsetpgrp(', 'int fd, pid_t pgrp)', 'int', 'unistd.h')
call cppapi#function('telldir(', 'DIR *dir)', 'off_t', 'dirent.h')
call cppapi#function('tempnam(', 'const char *dir, const char *pfx)', 'char ', 'stdio.h')
call cppapi#function('timegm(', 'struct tm *tm)', 'time_t', 'time.h stdlib.h')
call cppapi#function('timelocal(', 'struct tm *tm)', 'time_t', 'time.h stdlib.h')
call cppapi#function('tmpfile(', 'void)', 'FILE ', 'stdio.h')
call cppapi#function('tmpnam(', 'char *s)', 'char ', 'stdio.h')
call cppapi#function('toascii(', 'int c)', 'int', 'ctype.h')
call cppapi#function('tolower(', 'int c)', 'int', 'ctype.h')
call cppapi#function('toupper(', 'int c)', 'int', 'ctype.h')
call cppapi#function('towctrans(', 'wint_t wc, wctrans_t desc)', 'wint_t', 'wctype.h')
call cppapi#function('towlower(', 'wint_t wc)', 'wint_t', 'wctype.h')
call cppapi#function('towupper(', 'wint_t wc)', 'wint_t', 'wctype.h')
call cppapi#function('ttowardl(', 'long double x, long double y)', 'long double', 'math.h')
call cppapi#function('ttyname(', 'int fd)', 'char ', 'unistd.h')
call cppapi#function('ttyname_r(', 'int fd, char *buf, size_t buflen)', 'int', 'unistd.h')
call cppapi#function('tzset (', 'void)', 'void', 'time.h')
call cppapi#function('ulimit(', 'int cmd, long newlimit)', 'long', 'ulimit.h')
call cppapi#function('ungetwc(', 'wint_t wc, FILE *stream)', 'wint_t', 'wchar.h')
call cppapi#function('unlockpt(', 'int fd)', 'int', 'stdlib.h')
call cppapi#function('unsetenv(', 'const char *name)', 'int', 'stdlib.h')
call cppapi#function('usleep(', 'useconds_t usec)', 'int', '')
call cppapi#function('utmpname(', 'const char *file)', 'void', 'utmpx.h')
call cppapi#function('uuid_copy(', 'uuid_t dst, uuid_t src)', 'void', 'uuid/uuid.h')
call cppapi#function('uuid_generate_time(', 'uuid_t out)', '', 'uuid/uuid.h')
call cppapi#function('uuid_is_null(', 'uuid_t uu)', 'int', 'uuid/uuid.h')
call cppapi#function('uuid_parse(', 'char *in, uuid_t uu)', 'int', 'uuid/uuid.h')
call cppapi#function('valloc(', 'size_t size)', 'void ', '600 stdlib.h')
call cppapi#function('vasprintf(', 'char **strp, const char *fmt, va_list ap)', 'int', 'stdio.h')
call cppapi#function('vdprintf(', 'int fd, const char *format, va_list ap)', 'int', 'stdio.h')
call cppapi#function('void (', '*sighandler_t)', 'typedefint)', 'signal.h')
call cppapi#function('vsyslog(', 'int priority, const char *format, va_list ap)', 'void', 'syslog.h')
call cppapi#function('wcpcpy(', 'wchar_t *dest, const wchar_t *src)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcpncpy(', 'wchar_t *dest, const wchar_t *src, size_t n)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcrtomb(', 'char *s, wchar_t wc, mbstate_t *ps)', 'size_t', 'wchar.h')
call cppapi#function('wcscasecmp(', 'const wchar_t *s1, const wchar_t *s2)', 'int', 'wchar.h')
call cppapi#function('wcscat(', 'wchar_t *dest, const wchar_t *src)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcschr(', 'const wchar_t *wcs, wchar_t wc)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcscmp(', 'const wchar_t *s1, const wchar_t *s2)', 'int', 'wchar.h')
call cppapi#function('wcscpy(', 'wchar_t *dest, const wchar_t *src)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcscspn(', 'const wchar_t *wcs, const wchar_t *reject)', 'size_t', 'wchar.h')
call cppapi#function('wcsdup(', 'const wchar_t *s)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcslen(', 'const wchar_t *s)', 'size_t', 'wchar.h')
call cppapi#function('wcsncasecmp(', 'const wchar_t *s1, const wchar_t *s2, size_t n)', 'int', 'wchar.h')
call cppapi#function('wcsncat(', 'wchar_t *dest, const wchar_t *src, size_t n)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcsncmp(', 'const wchar_t *s1, const wchar_t *s2, size_t n)', 'int', 'wchar.h')
call cppapi#function('wcsncpy(', 'wchar_t *dest, const wchar_t *src, size_t n)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcsnlen(', 'const wchar_t *s, size_t maxlen)', 'size_t', 'wchar.h')
call cppapi#function('wcspbrk(', 'const wchar_t *wcs, const wchar_t *accept)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcsrchr(', 'const wchar_t *wcs, wchar_t wc)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcsrtombs(', 'char *dest, const wchar_t **src, size_t len, mbstate_t *ps)', 'size_t', 'wchar.h')
call cppapi#function('wcsspn(', 'const wchar_t *wcs, const wchar_t *accept)', '', 'wchar.h')
call cppapi#function('wcsstr(', 'const wchar_t *haystack, const wchar_t *needle)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcstok(', 'wchar_t *wcs, const wchar_t *delim, wchar_t **ptr)', 'wchar_t ', 'wchar.h')
call cppapi#function('wcstombs(', 'char *dest, const wchar_t *src, size_t n)', 'size_t', 'stdlib.h')
call cppapi#function('wcstoumax(', 'const wchar_t *nptr, wchar_t **endptr, int base)', '', 'stddef.h inttypes.h')
call cppapi#function('wcswidth(', 'const wchar_t *s, size_t n)', 'int', 'wchar.h')
call cppapi#function('wctob(', 'wint_t c)', 'int', 'wchar.h')
call cppapi#function('wctomb(', 'char *s, wchar_t wc)', 'int', 'stdlib.h')
call cppapi#function('wctrans(', 'const char *name)', 'wctrans_t', 'wctype.h')
call cppapi#function('wctype(', 'const char *name)', 'wctype_t', 'wctype.h')
call cppapi#function('wcwidth(', 'wchar_t c)', 'int', 'wchar.h')
call cppapi#function('wcwidth(', 'wint_t c)', 'int', 'wchar.h')
call cppapi#function('wmemchr(', 'const wchar_t *s, wchar_t c, size_t n)', 'wchar_t ', 'wchar.h')
call cppapi#function('wmemcmp(', 'const wchar_t *s1, const wchar_t *s2, size_t n)', 'int', 'wchar.h')
call cppapi#function('wmemcpy(', 'wchar_t *dest, const wchar_t *src, size_t n)', 'wchar_t ', 'wchar.h')
call cppapi#function('wmemmove(', 'wchar_t *dest, const wchar_t *src, size_t n)', 'wchar_t ', 'wchar.h')
call cppapi#function('wmempcpy(', 'wchar_t *dest, const wchar_t *src, size_t n)', 'wchar_t ', 'string.h')
call cppapi#function('wmemset(', 'wchar_t *wcs, wchar_t wc, size_t n)', 'wchar_t ', 'wchar.h')
call cppapi#function('wordexp(', 'const char *s, wordexp_t *p, int flags)', 'int', 'stdio.h wordexp.h')
call cppapi#function('wordfree(', 'wordexp_t *p)', 'void', 'stdio.h wordexp.h')
call cppapi#function('wsyncdown(', 'WINDOW *win)', '', 'curses.h')
call cppapi#function('xdecrypt(', 'char *secret, char *passwd)', 'int', 'rpc/des_crypt.h')
call cppapi#function('xencrypt(', 'char *secret, char *passwd)', 'int', 'rpc/des_crypt.h')
